{
    "#!/usr/bin/env python": {
        "prefix": "#!",
        "body": [
            "#!/usr/bin/env python",
            "$0"
        ],
        "description": "Adds shebang line for default python interpreter."
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": [
            "def ${1:main}() -> int:",
            "\t$0",
            "\treturn 0",
            "",
            "",
            "if __name__ == \"__main__\":",
            "\traise SystemExit($1())"
        ],
        "description": "Create implicitly all the code at the top level using the __name__ special variable."
    },
    "async if __name__ == \"__main__\"": {
        "prefix": "aifmain",
        "body": [
            "import asyncio",
            "",
            "",
            "async def ${1:main}() -> int:",
            "\t$0",
            "\treturn 0",
            "",
            "",
            "if __name__ == \"__main__\":",
            "\traise SystemExit(asyncio.run($1()))"
        ],
        "description": "Create implicitly all the code at the top level using the __name__ special variable."
    },
    "class": {
        "prefix": [
            "class",
            "cls"
        ],
        "body": [
            "class ${1:ClassName}:",
            "\t${2:...}$0"
        ],
        "description": "Code snippet for a class definition"
    },
    "dataclass": {
        "prefix": [
            "dtclass",
            "dtcls"
        ],
        "body": [
            "@dataclass${1}",
            "class ${2:DataClassName}:",
            "\t${3:...}$0"
        ],
        "description": "Code snippet for a dataclass definition"
    },
    "protocol class": {
        "prefix": [
            "pclass",
            "pcls"
        ],
        "body": [
            "class ${1:ProtocolClassName}(Protocol):",
            "\t${2:...}$0"
        ],
        "description": "Code snippet for a protocol definition"
    },
    "abstract class": {
        "prefix": [
            "abclass",
            "abcls"
        ],
        "body": [
            "class ${1:AbstractClassName}(ABC):",
            "\t${2:...}$0"
        ],
        "description": "Code snippet for a abstract class definition"
    },
    "constructor": {
        "prefix": "ctor",
        "body": [
            "def __init__(self${1}) -> None:",
            "\t${2:...}$0"
        ],
        "description": "Code snippet for a class constructor."
    },
    "function": {
        "prefix": "def",
        "body": [
            "def ${1:function_name}(${2}) -> ${3:None}:",
            "\t${4:...}$0"
        ],
        "description": "Code snippet for function definition."
    },
    "async function": {
        "prefix": "adef",
        "body": [
            "async def ${1:function_name}(${2}) -> ${3:None}:",
            "\t${4:...}$0"
        ],
        "description": "Code snippet for async function definition."
    },
    "method": {
        "prefix": "m",
        "body": [
            "def ${1:method_name}(self${2}) -> ${3:None}:",
            "\t${4:...}$0"
        ],
        "description": "Code snippet for a class method definition."
    },
    "async method": {
        "prefix": "am",
        "body": [
            "async def ${1:method_name}(self${2}) -> ${3:None}:",
            "\t${4:...}$0"
        ],
        "description": "Code snippet for an async class method definition."
    },
    "__magic__": {
        "prefix": "dm",
        "body": [
            "def __${1:init}__(self${2}) -> ${3:None}:",
            "\t${4:...}$0"
        ],
        "description": "Code snippet to create magic methods."
    },
    "async __magic__": {
        "prefix": "adm",
        "body": [
            "async def __${1:init}__(self${2}) -> ${3:None}:",
            "\t${4:...}$0"
        ],
        "description": "Code snippet to create async magic methods."
    },
    "try:except:": {
        "prefix": "try",
        "body": [
            "try:",
            "\t${1:pass}",
            "except ${2:Exception} as ${3:e}:",
            "\t${4:raise $3}$0"
        ],
        "description": "Code Snippet for a try and except blocks."
    },
    "return <result>": {
        "prefix": "re",
        "body": "return $0",
        "description": "Shortend snippet to return something."
    },
    "just return": {
        "prefix": "ree",
        "body": "return$0",
        "description": "Shortend snippet to return."
    },
    "self": {
        "prefix": [
            "o",
            "."
        ],
        "body": "self.$0",
        "description": "Shortend snippet to reference the self property in an object."
    },
    "set attribute": {
        "prefix": "a",
        "body": "self.${1:attr} = ${2:$1}$0",
        "description": "Code snippet to set class attributes."
    },
    "f-string": {
        "prefix": "fs",
        "body": "f\"$0\"",
        "description": "Shortend snippet to f-string."
    },
    "print": {
        "prefix": "pr",
        "body": "print($0)",
        "description": "Shortend snippet to print function."
    },
    "printf": {
        "prefix": "prf",
        "body": "print(f\"$0\")",
        "description": "Shortend snippet to print function with f-string."
    },
    "type check ignore": {
        "prefix": "#ti",
        "body": "# type: ignore$0",
        "description": "Shortend snippet to ignore type checks."
    },
    "no code quality": {
        "prefix": "#nq",
        "body": "# noqa$0",
        "description": "Shortend snippet to ignore code quality checks."
    },
    "ignore code coverage": {
        "prefix": "#nc",
        "body": "# pragma: no cover$0",
        "description": "Shortend snippet to ignore code coverage."
    }
}
