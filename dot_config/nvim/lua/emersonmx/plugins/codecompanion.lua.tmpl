{{- $defaultAdapter := .nvim.ai.default.adapter -}}
local default_adapter = "{{ $defaultAdapter }}"
local cached_api_keys = {}

local function get_apikey(adapter)
    local cached_api_key = cached_api_keys[adapter]
    if cached_api_key == nil then
        local api_key_file = vim.fn.stdpath("config")
            .. "/apikeys/"
            .. adapter
            .. ".gpg"
        local command = "gpg --batch --decrypt "
            .. vim.fn.shellescape(api_key_file)
            .. " 2>/dev/null"
        cached_api_key = vim.fn.system(command)
        cached_api_key = cached_api_key:gsub("%s*$", ""):gsub("^%s*", "")
        if vim.v.shell_error ~= 0 then
            vim.notify(
                "Failed to decrypt API key from " .. api_key_file,
                vim.log.levels.ERROR
            )
            cached_api_key = ""
        end
        cached_api_keys[adapter] = cached_api_key
    end
    return cached_api_key
end

return {
    "olimorris/codecompanion.nvim",
    opts = {
        adapters = {
            http = {
                gemini = function()
                    return require("codecompanion.adapters").extend("gemini", {
                        env = { api_key = get_apikey("gemini") },
                    })
                end,
            },
        },
        strategies = {
            chat = {
                adapter = default_adapter,
            },
            inline = {
                adapter = default_adapter,
            },
            cmd = {
                adapter = default_adapter,
            },
        },
        display = {
            chat = {
                auto_scroll = false,
            },
        },
        extensions = {
            mcphub = {
                callback = "mcphub.extensions.codecompanion",
                opts = {
                    make_tools = true,
                    show_server_tools_in_chat = true,
                    add_mcp_prefix_to_tool_names = false,
                    show_result_in_chat = true,
                    format_tool = nil,
                    make_vars = true,
                    make_slash_commands = true,
                },
            },
        },
    },
    dependencies = {
        "nvim-lua/plenary.nvim",
        "nvim-treesitter/nvim-treesitter",
        "ravitemer/mcphub.nvim",
    },
}
